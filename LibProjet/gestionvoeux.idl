/*******************************
 CONTRAT IDL SPECIFIANT LES METHODES DE LA GESTION DES VOEUX POUR L'ADMISSION POST-LICENCE
********************************/
module gestionVoeu
{	
	//Ensemble d'enumerations spécifiant des ensembles pour les structures qui suivent
	enum Quartile{PREMIER_QUART, DEUXIEME_QUART, TROISIEME_QUART, QUATRIEME_QUART};
	enum MoyenObtention{PREMIERE_SESSION, SECONDE_SESSION, REDOUBLEMENT};
	enum EtatDecision{ADMIS, ATTENTE, REFUSE};
	enum EtatVoeu{CREE, ACCEPTE, OUI_DEFINITIF, OUI_MAIS, NON_MAIS, NON_DEFINITIF};
	enum EtatInscription{VALIDE, NON_VALIDE, CLOTURE};

	/*Detail d'un semestre avec :
	* - numSemestre = sa position dans le temps (premier, second semestre...)
	* - quartile est le quart dans lequel il se trouve par rapport a ses camarades de promotion
	*/
	struct SemestreDetail{
		float moyenne;
		Quartile quartile;
		MoyenObtention moyenObtention;
		long numSemestre;
	};

	//Sequence des 6 semestres pour un étudiant pour une license
	typedef sequence<SemestreDetail, 6> SemestreList;

	//liste de diplômes
	typedef sequence<string> ListeLicence;

	//Structure d'un étudiant
	struct EtudiantDetail{
		string num_etudiant;
		string nom;
		string prenom;
		string adresse;
		string universite;
		string license;
		SemestreList listeSeum;
	};
	
	//Structure d'un voeux pour un étudiant
	struct VoeuxDetail{
		long master;
		string universite;
		long classement;
		EtudiantDetail etu;
	};
	
	//Liste de voeux
	typedef sequence<VoeuxDetail> VoeuxList;
	
	//Structure permettant de savoir a un instant t sont état en fonction des décisions des partis
	struct CandidatureDetail{
		VoeuxDetail voeuxDetail;
		EtatInscription etatInscription;
		EtatVoeu etatVoeu;
		EtatDecision etatDecision;
	};
	
	//Liste de candidature classique
	typedef sequence<CandidatureDetail> CandidatureList;
	
	//faire un commentaire
	struct DiplomeDetail{
		long id;
		string libelle;
		ListeLicence listeDip;
	};
	
	//faire un commentaire
	typedef sequence<DiplomeDetail> DiplomeList;

	//Liste de master
	typedef sequence<long> AffiliationMasterList;

	//Ensemble d'exceptions
	exception compteInconnu {
		string raison; 
		long id;
	};
    	exception malformedInformation {
		string raison; 
		long id;
	};
	exception diplomeInconnu {
		string raison; 
		long id;
	};
	exception voeuInconnu {
		string raison; 
		long id;
	};

        //identification universite
        struct UniversiteDetail{
                string id;
                string name;
        };
        //liste d'universités
        typedef sequence<UniversiteDetail> ListeUniversite;
        
        //identification rectorat
        struct RectoratDetail{
                string id;
                string name;
        };
	//liste de rectorats
	typedef sequence<RectoratDetail> ListeRectorat;

	//Permet d'accéder aux infos des candidatures et faire des choix pour chacunes par formation/université
	interface Universite{
		AffiliationMasterList getAffiliations();
	};
	
	//interface pour que le Rectorat puisse excercer sa fonction, récuperer des listes de voeux par étudiant ou par master
	interface Rectorat{		
		EtudiantDetail connexion(in string num_etu, in string pwd) raises (compteInconnu);
		void creerVoeux(in VoeuxDetail monVoeux);
		CandidatureList recupererVoeuxEtudiant(in string num_etu) raises (compteInconnu);
                ListeUniversite recupererUniversites();
                CandidatureList recupererVoeuxMaster(in long master) raises(diplomeInconnu);
                void modifierCandidatureEtat(in CandidatureDetail maCandidature) raises(malformedInformation);
	};

	//interface pour permettre le workflow de ministere (echange de candidature et de voeux) et savoir quelle université fait quel master
	interface Ministere{
		DiplomeList getListDiplomes();
		ListeRectorat getListRectorats();
	};
};
